buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.4"
    }
}

apply plugin: 'com.gradle.plugin-publish'

group 'net.vivin'
version '1.0.1'

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
}

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'java-gradle-plugin'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDir 'src/main/java'

dependencies {
    compile gradleApi()
    compile localGroovy()

    compile 'org.eclipse.jgit:org.eclipse.jgit:4.4.0.201606070830-r'
    compile 'org.codehaus.groovy:groovy-all:2.4.4'

    testCompile "org.testng:testng:6.9.10"
    testCompile "org.eclipse.jgit:org.eclipse.jgit.junit:4.4.0.201606070830-r"
    testCompile "junit:junit:4.12"
}

jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

test {
    useTestNG()

    finalizedBy jacocoTestReport
}

pluginBundle {
    website = 'https://github.com/vivin/gradle-semantic-build-versioning'
    vcsUrl = 'https://github.com/vivin/gradle-semantic-build-versioning'
    description = 'This is a gradle plugin that provides support for semantic versioning of builds. It is quite easy to use and extremely configurable. The plugin allows you to bump the major, minor, and patch version based on the latest version, which is identified from a git tag. It also allows you to bump pre-release versions based on a scheme that you define. The version can be bumped by using version-component-specific tasks or can be bumped automatically based on the contents of a commit message. If no tasks from the plugin are specifically invoked, the plugin will increment the version-component with the lowest precedence; this is usually the patch version, but can be the pre-release version if the latest version is a pre-release one.'
    tags = ['versioning', 'semantic-versioning', 'git', 'build-versioning', 'auto-versioning', 'version']

    plugins {
        semanticBuildVersioningPlugin {
            id = 'net.vivin.gradle-semantic-build-versioning'
            displayName = 'Gradle Semantic Build Versioning Plugin'
        }
    }
}

publishing {
    publications {
        plugin(MavenPublication) {
            from components.java
            groupId project.group
            artifactId 'gradle-semantic-build-versioning'
            version project.version
        }
    }
}